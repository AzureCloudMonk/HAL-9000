#!/usr/bin/env python

from contextlib import contextmanager
import argparse
import json
import os
import subprocess
import sys


class Setting(object):

    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    DOTFILES_ROOT = os.path.join(PROJECT_ROOT, 'dotfiles/')


class Color(object):

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class DotfilesConfig(object):

    DEFAULT_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.json')
    EXAMPLE_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.example.json')

    def __init__(self, path=None):
        self.path = path or self.DEFAULT_CONFIG
        self.__data = None

    @property
    def data(self):
        if not self.__data:
            with open(self.path) as f:
                self.__data = json.load(f)

            if not self.__data:
                with open(self.EXAMPLE_CONFIG) as f:
                    self.__data = json.load(f)

        return self.__data

    def find_by_key(self, key, value, field_name):
        some_list = self.data[field_name]

        try:
            some_dict = next(some_dict for some_dict in some_list if some_dict[key] == value)
        except StopIteration:
            some_dict = None

        return some_dict

    def show(self):
        print(json.dumps(self.data, sort_keys=True, indent=4, separators=(',', ': ')))

    def save(self):
        with open(self.path, 'w') as f:
            json.dump(self.data, f, sort_keys=True, indent=4, separators=(',', ': '))


class HAL9000Formatter(argparse.HelpFormatter):

    def __init__(self, prog):
        super(HAL9000Formatter, self).__init__(prog, max_help_position=30)


class HAL9000(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            prog='hal',
            description='I am completely operational, and all my circuits are functioning perfectly',
            version='9000',
            formatter_class=HAL9000Formatter
        )
        self.parser = parser

        subparsers = parser.add_subparsers(
            title='sub commands'
        )

        self.command_queue = []

        update_parser = subparsers.add_parser('update', help='pull the repo and run ansible-playbook')
        update_parser.set_defaults(func=self.update)

        create_parser = subparsers.add_parser('create', help='create Docker Machine VM')
        create_parser.set_defaults(func=self.create)

        prepare_parser = subparsers.add_parser('prepare', help='setup nginx-proxy and dnsmasq')
        prepare_parser.set_defaults(func=self.prepare)

        up_parser = subparsers.add_parser('up', help='simply a wrapper for `docker-compose up`')
        up_parser.set_defaults(func=self.up)

        self.config = DotfilesConfig()

        link_parser = subparsers.add_parser('link', help='')
        link_parser.set_defaults(func=self.link)
        link_parser.add_argument('filename', type=str)

        pod_bay_doors_parser = subparsers.add_parser('open-the-pod-bay-doors', help='open the pod bay doors, please, Hal')
        pod_bay_doors_parser.set_defaults(func=self.open_the_pod_bay_doors)

    def __compose(self, command, verbose=True):
        if isinstance(command, (list, tuple)):
            command = ' '.join(map(str, command))

        self.command_queue.append(command)
        commands = '; '.join(self.command_queue)

        if verbose:
            print('run: {}{}{}'.format(Color.OKBLUE, commands, Color.ENDC))

        return commands

    def __run(self, command, shell=True, verbose=True):
        commands = self.__compose(command, verbose)

        returncode = subprocess.call(commands, shell=shell)

        self.command_queue.pop()

        return returncode

    def __run_with_output(self, command, shell=True, verbose=True, print_output=True):
        commands = self.__compose(command, verbose)

        try:
            output = subprocess.check_output(commands, stderr=subprocess.STDOUT, shell=shell)
            returncode = 0
        except subprocess.CalledProcessError as exc:
            output = exc.output
            returncode = exc.returncode
        finally:
            if print_output and output:
                print(output)

        self.command_queue.pop()

        return returncode, output

    @contextmanager
    def __prefix(self, command):
        # __enter__
        self.__compose(command, verbose=False)

        yield

        # __exit__
        self.command_queue.pop()

    def update(self, namespace, extra_args=None):
        os.chdir('/usr/local/HAL-9000')
        self.__run('git fetch')
        self.__run('git pull')

        os.chdir('/usr/local/HAL-9000/playbooks')
        self.__run('ansible-playbook site.yml')

    def create(self, namespace, extra_args=None):
        returncode = self.__run('docker-machine create --driver virtualbox --virtualbox-cpu-count 2 --virtualbox-memory 4096 --engine-opt dns=192.168.99.100 --engine-opt dns=8.8.8.8 --engine-opt dns=8.8.4.4 dev')
        if returncode == 0:
            # scp /var/lib/boot2docker/bootsync.sh will cause Permission denied
            self.__run('docker-machine scp /usr/local/HAL-9000/playbooks/roles/docker/files/bootsync.sh test1:/var/lib/boot2docker/bootsync.sh')
            self.__run('docker-machine ssh dev "sudo mv /tmp/bootsync.sh /var/lib/boot2docker/bootsync.sh"')
            self.__run('docker-machine restart dev')

    def prepare(self, namespace, extra_args=None):
        self.__run('docker-machine start dev')

        returncode, output = self.__run_with_output('eval "$(docker-machine env dev)"', verbose=False, print_output=False)
        if 'Error running connection boilerplate' in output:
            self.__run('sleep 4')

        with self.__prefix('eval "$(docker-machine env dev)"'):
            self.__run('docker-compose -f /usr/local/HAL-9000/playbooks/roles/docker/files/dash.yml -p dash up -d')

    def up(self, namespace, extra_args=None):
        self.prepare(namespace, extra_args)

        os.chdir(os.getcwd())
        with self.__prefix('eval "$(docker-machine env dev)"'):
            command = ['docker-compose', 'up'] + extra_args
            self.__run(command)

    def link(self, namespace, extra_args=None):
        file_path = os.path.abspath(os.path.join(os.getcwd(), namespace.filename))
        file_name = os.path.basename(file_path)

        if self.__run('mv {} {}'.format(file_path, Setting.DOTFILES_ROOT)) == 0:
            ln_src = os.path.join(Setting.DOTFILES_ROOT, file_name)
            ln_dest = file_path
            self.__run('ln -sf {} {}'.format(ln_src, ln_dest))

            ln_dict = self.config.find_by_key('src', file_name, 'links')
            if ln_dict:
                ln_dict['dest'] = file_path
            else:
                self.config.data['links'].append(
                    {'dest': file_path, 'src': file_name},
                )

            self.config.save()
            self.config.show()

    def unlink(self, namespace, extra_args=None):
        pass

    def open_the_pod_bay_doors(self, namespace, extra_args=None):
        print("{}I'm sorry Dave, I'm afraid I can't do that.{}".format(Color.FAIL, Color.ENDC))

        self.__run('afplay /usr/local/HAL-9000/assets/Im_sorry_Dave_Im_afraid_I_cant_do_that.mp3', verbose=False)

    def read_lips(self):
        if len(sys.argv) == 1:
            self.parser.print_help()
            sys.exit(0)

        # https://docs.python.org/2/library/argparse.html#partial-parsing
        namespace, extra_args = self.parser.parse_known_args()
        namespace.func(namespace, extra_args)


if __name__ == '__main__':
    hal_9000 = HAL9000()
    hal_9000.read_lips()
