#!/usr/bin/env python

from contextlib import contextmanager
import argparse
import os
import subprocess
import sys


class COLOR(object):

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class HAL9000Formatter(argparse.HelpFormatter):

    def __init__(self, prog):
        super(HAL9000Formatter, self).__init__(prog, max_help_position=30)


class HAL9000(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            prog='hal',
            description='I am completely operational, and all my circuits are functioning perfectly',
            version='9000',
            formatter_class=HAL9000Formatter
        )

        subparsers = parser.add_subparsers(
            title='sub commands'
        )

        update_parser = subparsers.add_parser('update', help='pull the repo and run ansible-playbook')
        update_parser.set_defaults(func=self.update)

        create_parser = subparsers.add_parser('create', help='create Docker Machine VM')
        create_parser.set_defaults(func=self.create)

        start_parser = subparsers.add_parser('start', help='start Docker Machine VM')
        start_parser.set_defaults(func=self.start)

        prepare_parser = subparsers.add_parser('prepare', help='setup nginx-proxy and dnsmasq')
        prepare_parser.set_defaults(func=self.prepare)

        up_parser = subparsers.add_parser('up', help='simply a wrapper for `docker-compose up`')
        up_parser.set_defaults(func=self.up)

        pod_bay_doors_parser = subparsers.add_parser('open-the-pod-bay-doors', help='open the pod bay doors, please, Hal')
        pod_bay_doors_parser.set_defaults(func=self.open_the_pod_bay_doors)

        self.parser = parser

        self.command_queue = []

    def __compose(self, command, verbose=True):
        if isinstance(command, (list, tuple)):
            command = ' '.join(map(str, command))

        if verbose:
            print('run: {}{}{}'.format(COLOR.OKBLUE, command, COLOR.ENDC))

        self.command_queue.append(command)

        return command

    def __run(self, command, shell=True, verbose=True):
        command = self.__compose(command, verbose)

        commands = '; '.join(self.command_queue)
        return_code = subprocess.call(commands, shell=shell)

        self.command_queue = []

        return not return_code

    @contextmanager
    def __prefix(self, command, verbose=True):
        # __enter__
        command = self.__compose(command, verbose)

        yield

        # __exit__
        pass

    def update(self, args):
        os.chdir('/usr/local/HAL-9000')
        self.__run('git fetch')
        self.__run('git pull')

        os.chdir('/usr/local/HAL-9000/playbooks')
        self.__run('ansible-playbook site.yml')

    def create(self, args):
        if self.__run('docker-machine create --driver virtualbox --virtualbox-cpu-count 2 --virtualbox-memory 4096 --engine-opt dns=192.168.99.100 --engine-opt dns=8.8.8.8 --engine-opt dns=8.8.4.4 dev'):
            # scp /var/lib/boot2docker/bootsync.sh will cause Permission denied
            self.__run('docker-machine scp /usr/local/HAL-9000/playbooks/roles/docker/files/bootsync.sh test1:/var/lib/boot2docker/bootsync.sh')
            self.__run('docker-machine ssh dev "sudo mv /tmp/bootsync.sh /var/lib/boot2docker/bootsync.sh"')
            self.__run('docker-machine restart dev')

    def start(self, args):
        self.__run('docker-machine start dev')

    def prepare(self, args):
        self.start()

        with self.__prefix('eval "$(docker-machine env dev)"'):
            self.__run('docker-compose -f /usr/local/HAL-9000/playbooks/roles/docker/files/dash.yml -p dash up -d')

    def up(self, args):
        self.prepare()

        os.chdir(os.getcwd())
        with self.__prefix('eval "$(docker-machine env dev)"'):
            self.__run('docker-compose up')

    def stop(self, args):
        self.__run('docker-machine stop dev')

    def open_the_pod_bay_doors(self, args):
        print("{}I'm sorry Dave, I'm afraid I can't do that.{}".format(COLOR.FAIL, COLOR.ENDC))

        self.__run('afplay /usr/local/HAL-9000/assets/Im_sorry_Dave_Im_afraid_I_cant_do_that.mp3', verbose=False)

    def read_lips(self):
        if len(sys.argv) == 1:
            self.parser.print_help()
            sys.exit(0)

        args = self.parser.parse_args()
        args.func(args)


if __name__ == '__main__':
    hal_9000 = HAL9000()
    hal_9000.read_lips()
